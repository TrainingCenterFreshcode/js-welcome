'use strict';

// Написати функцію суми двох аргументів
function sum(a, b) { // Function Declaration
  return a + b;
}

const sumArrow = (a, b) => { // Arrow Function
  return a + b; // функція складається тільки з одного-єдиного return
}

const sumArrowVariant2 = (a, b) => a + b; // a + b === { return a + b }

// Задача: Написати функцію, яка приймає число і зводить його у квадрат

const pow = number => number ** 2; // якщо 1 аргумент, то круглі дужки () можна опустити
// АЛЕ ! Якщо ваша функція не приймає аргументів взагалі - круглі дужки (пусті) обов'язково потрібно писати

const SuperFunc = () => { // this вказує на глоабальну область видимості
  this.value = 'hello'; // нам потрібно, щоб функція-конструктор вказувала на свій власний контекст виконання
} // функція-конструктор не може бути стрілочною


// arguments - псевдомасив з аргументами, які ми передаємо нашій функції при виклику

const t1 = function () { // Function Expression
  console.log(arguments);
}

const t2 = () => { // стрілочні функції не мають arguments
  console.log(arguments);
}

t2('hello', 'world', '!!!!!');

/* Особливості стрілочних функцій (Arrow Function)

1. Стрілочна функція не має свого власного контексту виконання (вона буде завжди брати найближчий доступний їй this, свого this вона не матиме)
2. Стрілочна функція не може бути функцією-конструктором
3. Стрілочна функція не має колекції arguments

*/