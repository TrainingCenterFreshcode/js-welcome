// array.concat - використовується для об'єднання двох або більше масивів у новий масив (немутуючий)
// array.fill - використовується для заповнення всіх елементів масиву якимсь одним значенням (мутуючий)
// array.includes - використовується для перевірки наявності певного значення у масиві (немутуючий)
// array.indexOf - використовується для отримання першого входження певного значення у масиві (немутуючий)
// array.join - використовується для створення рядка, об'єднуючи всі елементи масиву (немутуючий)
// array.push - використовується для додавання одного або кількох елементів у кінець (мутуючий)
// array.pop - використовується для видалення останнього елементу (мутуючий)
// array.shift - використовується для видалення першого елементу з початку масиву (мутуючий)
// array.unshift - використовується для додавання одного або декількох елементів на початок масиву (мутуючий)
// array.reverse - використовується для зміни порядку елементів у масиві на протилежний (мутуючий)
// array.slice - використовується для створення нового масиву, який складається тільки з якоїсь певної частини вихідного масиву (немутуючий)
// array.splice - використовується для зміни вмісту масиву шляхом видалення, заміни або додавання нових елементів (мутуючий)
// array.forEach - використовується для перебору (ітерації) кожного елемента масиву і виконання певної дії для кожного елемента
// array.map - працює як forEach, тільки map буде повертати новий масив (не мутуючий)
// array.sort - використовується для сортування елементів в масиві (мутуючий)
// array.filter - використовується для створення нового масиву, який місти лише ті елементи, які задовільняють певній умові (не мутуючий)
// array.reduce - використовується для обчислення якого ОДНОГО значення на основі всіх елементів масиву (не мутуючий)

const dogArray = [{
  nickname: 'Tuzik',
  color: 'black',
  weight: 3,
  age: 2 
}, {
  nickname: 'Dolly',
  color: 'white',
  weight: 5,
  age: 3
}, {
  nickname: 'Fagot',
  color: 'black',
  weight: 9,
  age: 5
}, {
  nickname: 'Stus',
  color: 'black',
  weight: 15,
  age: 1
}]

// Задача: відсортувати собак за вагою на збільшення (у порядку зростання)

// dogArray.sort((dog1, dog2) => {
//   if(dog1.weight < dog2.weight) {
//     // 5 (dog1), 9 (dog2)
//     return -1;
//   } else { // dog1.weight > dog2.weight
//     // 9 (dog1), 5 (dog2)
//     return 1;
//   }
// })

/*
-1 - dog1, dog2
0 - всі на місці
1 - dog2, dog1

*/

dogArray.sort((dog1, dog2) => {
  // return dog1.weight - dog2.weight; // у порядку зростання
  return dog2.weight - dog1.weight; // у порядку спадання
});

/*

Задача 1

Відсортувати собак від найстаршого до наймолодшого

*/

// variant 1
// dogArray.sort((dog1, dog2) => {
//   return dog2.age - dog1.age; // у порядку спадання
// });

// variant 2
dogArray.sort((dog1, dog2) => {
  if(dog1.age > dog2.age) {
    // 1 (dog1), 4 (dog2)
    return -1;
  } else { // dog1.age < dog2.age
    // 3 (dog1), 1 (dog2)
    return 1;
  }
})

/*
-1 - dog1, dog2
0 - всі на місці
1 - dog2, dog1

*/